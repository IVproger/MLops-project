x-airflow-common:
  &airflow-common
  # Use custom Dockerfile with additional dependencies
  build:
    context: .
    dockerfile: ./airflow.Dockerfile
  environment:
    &airflow-common-env
    AIRFLOW__CORE__EXECUTOR: LocalExecutor
    AIRFLOW__DATABASE__SQL_ALCHEMY_CONN: postgresql+psycopg2://airflow:airflow@postgres/airflow
    AIRFLOW__CORE__FERNET_KEY: ''
    AIRFLOW__CORE__DAGS_ARE_PAUSED_AT_CREATION: 'true'
    AIRFLOW__CORE__LOAD_EXAMPLES: 'false'
    AIRFLOW__API__AUTH_BACKENDS: 'airflow.api.auth.backend.basic_auth,airflow.api.auth.backend.session'
    AIRFLOW__SCHEDULER__ENABLE_HEALTH_CHECK: 'true'
    AIRFLOW__WEBSERVER__SECRET_KEY: 'key'
    AIRFLOW_HOME: /project/services/airflow
    PYTHONPATH: /project
    # AIRFLOW_CONFIG: '/opt/airflow/config/airflow.cfg'
    # Authentication for ZenML
    ZENML_DEFAULT_USER_NAME: ${ZENML_STORE_USERNAME:-admin}
    ZENML_DEFAULT_USER_PASSWORD: ${ZENML_STORE_PASSWORD:-admin}
    ZENML_ANALYTICS_OPT_IN: false
    ZENML_CONFIG_PATH: /project/services/zenml
  volumes:
    - ./:/project
    - $HOME/.gitconfig:/home/airflow/.gitconfig
    - $HOME/.git-credentials:/home/airflow/.git-credentials
  user: "${AIRFLOW_UID:-50000}:0"
  depends_on:
    &airflow-common-depends-on
    postgres:
      condition: service_healthy
    zenml:
      condition: service_started

services:
  postgres:
    image: postgres:13
    environment:
      POSTGRES_USER: airflow
      POSTGRES_PASSWORD: airflow
      POSTGRES_DB: airflow
    volumes:
      - postgres-db-volume:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD", "pg_isready", "-U", "airflow"]
      interval: 5s
      timeout: 30s
      retries: 50
      start_period: 5s
    restart: always

  airflow-webserver:
    <<: *airflow-common
    command: webserver
    ports:
      - "8080:8080"
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8080/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 1.5G

  airflow-scheduler:
    <<: *airflow-common
    command: scheduler
    healthcheck:
      test: ["CMD", "curl", "--fail", "http://localhost:8974/health"]
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 4.5G

  airflow-triggerer:
    <<: *airflow-common
    command: triggerer
    healthcheck:
      test: ["CMD-SHELL", 'airflow jobs check --job-type TriggererJob --hostname "$${HOSTNAME}"']
      interval: 30s
      timeout: 10s
      retries: 5
      start_period: 30s
    restart: always
    depends_on:
      <<: *airflow-common-depends-on
      airflow-init:
        condition: service_completed_successfully
    deploy:
      resources:
        limits:
          memory: 1G

  airflow-init:
    <<: *airflow-common
    entrypoint: /bin/bash
    # yamllint disable rule:line-length
    command:
      - -c
      - |
        if [[ -z "${AIRFLOW_UID}" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: AIRFLOW_UID not set!\e[0m"
          echo "If you are on Linux, you SHOULD follow the instructions below to set "
          echo "AIRFLOW_UID environment variable, otherwise files will be owned by root."
          echo "For other operating systems you can get rid of the warning with manually created .env file:"
          echo "    See: https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#setting-the-right-airflow-user"
          echo
        fi
        one_meg=1048576
        mem_available=$$(($$(getconf _PHYS_PAGES) * $$(getconf PAGE_SIZE) / one_meg))
        cpus_available=$$(grep -cE 'cpu[0-9]+' /proc/stat)
        disk_available=$$(df / | tail -1 | awk '{print $$4}')
        warning_resources="false"
        if (( mem_available < 4000 )) ; then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough memory available for Docker.\e[0m"
          echo "At least 4GB of memory required. You have $$(numfmt --to iec $$((mem_available * one_meg)))"
          echo
          warning_resources="true"
        fi
        if (( cpus_available < 2 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough CPUS available for Docker.\e[0m"
          echo "At least 2 CPUs recommended. You have $${cpus_available}"
          echo
          warning_resources="true"
        fi
        if (( disk_available < one_meg * 10 )); then
          echo
          echo -e "\033[1;33mWARNING!!!: Not enough Disk space available for Docker.\e[0m"
          echo "At least 10 GBs recommended. You have $$(numfmt --to iec $$((disk_available * 1024 )))"
          echo
          warning_resources="true"
        fi
        if [[ $${warning_resources} == "true" ]]; then
          echo
          echo -e "\033[1;33mWARNING!!!: You have not enough resources to run Airflow (see above)!\e[0m"
          echo "Please follow the instructions to increase amount of resources available:"
          echo "   https://airflow.apache.org/docs/apache-airflow/stable/howto/docker-compose/index.html#before-you-begin"
          echo
        fi
        mkdir -p /sources/logs /sources/dags /sources/plugins
        chown -R "${AIRFLOW_UID}:0" /sources/{logs,dags,plugins}
        exec /entrypoint airflow version
    # yamllint enable rule:line-length
    environment:
      <<: *airflow-common-env
      _AIRFLOW_DB_MIGRATE: 'true'
      _AIRFLOW_WWW_USER_CREATE: 'true'
      _AIRFLOW_WWW_USER_USERNAME: ${_AIRFLOW_WWW_USER_USERNAME:-airflow}
      _AIRFLOW_WWW_USER_PASSWORD: ${_AIRFLOW_WWW_USER_PASSWORD:-airflow}
    user: "0:0"
    volumes:
      - ./services/airflow:/sources
    deploy:
      resources:
        limits:
          memory: 1G

  airflow-cli:
    <<: *airflow-common
    profiles:
      - debug
    environment:
      <<: *airflow-common-env
      CONNECTION_CHECK_MAX_COUNT: "0"
    # Workaround for entrypoint issue. See: https://github.com/apache/airflow/issues/16252
    command:
      - bash
      - -c
      - airflow
    deploy:
      resources:
        limits:
          memory: 1G

  # ZenML server
  zenml:
    image: zenmldocker/zenml-server:0.58.2
    command: --port 8081 --host 0.0.0.0
    ports:
      - "8081:8081"
    environment:
      ZENML_DEFAULT_USER_NAME: ${ZENML_STORE_USERNAME:-admin}
      ZENML_DEFAULT_USER_PASSWORD: ${ZENML_STORE_PASSWORD:-admin}
      ZENML_SERVER_AUTO_ACTIVATE: 1
      ZENML_ANALYTICS_OPT_IN: false
      ZENML_CONFIG_PATH: /project/services/zenml
    volumes:
      - ./:/project
    user: "${AIRFLOW_UID:-50000}:0"
    restart: always
    deploy:
      resources:
        limits:
          memory: 1G

  # Model serving
  ml:
    build:
      context: .
      dockerfile: api/ml.Dockerfile
    restart: always
    ports:
      - "8082:8080"
    profiles: [ api ]

  # Model serving
  ml-api:
    build:
      context: .
      dockerfile: api/api.Dockerfile
    restart: always
    ports:
      - "8083:5001"
    profiles: [ api ]

  # Model serving
  ml-gradio:
    build:
      context: .
      dockerfile: api/gradio.Dockerfile
    restart: always
    ports:
      - "8084:5155"
    volumes:
      - ./:/project
    user: "${AIRFLOW_UID:-50000}:0"
    environment:
      INVOCATIONS_URL: http://ml:8082/invocations
    profiles: [ api ]
    depends_on: [ ml ]

volumes:
  postgres-db-volume:
